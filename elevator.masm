.data
# String constants
nl:         .asciiz ".\n"
flr:        .asciiz "What floor is the elevator on?\n"
call:       .asciiz "What is the state of the call buttons on floor "
btn:        .asciiz "What is the state of the interior buttons?\n"
mov:        .asciiz "The elevator is moving "
up:         .asciiz "up"
dn:         .asciiz "down"
door:       .asciiz "The doors are "
cl:         .asciiz "closing"
op:         .asciiz "opening"
inv:        .asciiz "The elevator is in an invalid state, and this controller is shutting down to prevent damage. Contact a maintenance technician.\n"
emerg1:     .asciiz "An emergency has occurred in the elevator. It was last seen on floor "
emerg2:     .asciiz " moving "
emerg3:     .asciiz "the elevator control script will now exit. Please restart it once the emergency has been resolved.\n"
.text

j main
 
# -----------------------------------------------------------------------------------------------------------

invalid: # Worst Case handler for invalid data. Exits immediately with a warning and no further action.
 li $v0, 4   # System call for print string
 la $a0, inv # Load invalid state message
 syscall     # Print error message
 li $v0, 10  # System call for exit
 syscall     # Terminate program
 
# -----------------------------------------------------------------------------------------------------------

# Updates elevator floor position from user input
# Clobbers: $v0, $a0
# Preserves: $t8, $t9 (must be saved due to syscall)
# Modifies: $s0 (global state register)
checkFloor:
 addi $sp, $sp, -8 # Allocate stack space for 2 registers
 sw $t8, 0($sp)    # Preserve caller's $t8 (door state)
 sw $t9, 4($sp)    # Preserve caller's $t9 (motion state)
 
 # Prompt for floor input
 li $v0, 4   # System call for print string
 la $a0, flr # Load floor prompt
 syscall     # Print "What floor is the elevator on?"
 
 # Get user input
 li $v0, 5 # System call for read integer
 syscall   # Get floor number from user

 # Input validation (upper bound)
 bgt $v0, 5, invalid # Jump to error handler if floor > 5
 blt $v0, 1, invalid # Jump to error handler if floor < 1
 
 # Update global floor state
 move $s0, $v0 # Store (validated) input in $s0
 
 # Restore preserved data
 lw $t8, 0($sp)   # Restore $t8
 lw $t9, 4($sp)   # Restore $t9
 addi $sp, $sp, 8 # Deallocate stack space
 
 jr $ra # return to caller (main)
 
# -----------------------------------------------------------------------------------------------------------

# Updates button states from user input. None of this data needs to be checked for bounds, because all operations are bitwise and unused bits are simply ignored.
# Clobbers: $v0, $a0
# Preserves: $t8, $t9 (must be saved due to syscall)
# Modifies: $s1-$s6 (global state registers)
getButtons:
 addi $sp, $sp, -8 # Allocate stack space for 2 registers
 sw $t8, 0($sp)    # Preserve caller's $t8 (door state)
 sw $t9, 4($sp)    # Preserve caller's $t9 (motion state)
 
 # Prompt for floor input
 li $v0, 4   # System call for print string
 la $a0, btn # Load button prompt
 syscall     # Print the prompt
 # Get user input
 li $v0, 5      # System call for read integer
 syscall        # Get input number from user
 move  $s6, $v0 # Save the button data.
 
 # Get each floor's state
 # Floor 1
 li $v0, 4    # System call for print string
 la $a0, call # Load call button prompt
 syscall      # Print the prompt
 li $v0, 1    # System call for print number
 li $a0, 1    # Load 1
 syscall      # Print the prompt
 li $v0, 4    # System call for print string
 la $a0, nl   # Load call button prompt
 syscall      # Print the prompt
 # Get user input
 li $v0, 5      # System call for read integer
 syscall        # Get input number from user
 move  $s1, $v0 # Save the button data.
 
 # Floor 2
 li $v0, 4    # System call for print string
 la $a0, call # Load call button prompt
 syscall      # Print the prompt
 li $v0, 1    # System call for print number
 li $a0, 2    # Load 2
 syscall      # Print the prompt
 li $v0, 4    # System call for print string
 la $a0, nl   # Load call button prompt
 syscall      # Print the prompt
 # Get user input
 li $v0, 5      # System call for read integer
 syscall        # Get input number from user
 move  $s2, $v0 # Save the button data.
 
 # Floor 3
 li $v0, 4    # System call for print string
 la $a0, call # Load call button prompt
 syscall      # Print the prompt
 li $v0, 1    # System call for print number
 li $a0, 3    # Load 3
 syscall      # Print the prompt
 li $v0, 4    # System call for print string
 la $a0, nl   # Load call button prompt
 syscall      # Print the prompt
 # Get user input
 li $v0, 5      # System call for read integer
 syscall        # Get input number from user
 move  $s3, $v0 # Save the button data.
 
 # Floor 4
 li $v0, 4    # System call for print string
 la $a0, call # Load call button prompt
 syscall      # Print the prompt
 li $v0, 1    # System call for print number
 li $a0, 4    # Load 4
 syscall      # Print the prompt
 li $v0, 4    # System call for print string
 la $a0, nl   # Load call button prompt
 syscall      # Print the prompt
 # Get user input
 li $v0, 5      # System call for read integer
 syscall        # Get input number from user
 move  $s4, $v0 # Save the button data.
 
 # Floor 5
 li $v0, 4    # System call for print string
 la $a0, call # Load call button prompt
 syscall      # Print the prompt
 li $v0, 1    # System call for print number
 li $a0, 5    # Load 5
 syscall      # Print the prompt
 li $v0, 4    # System call for print string
 la $a0, nl   # Load call button prompt
 syscall      # Print the prompt
 # Get user input
 li $v0, 5      # System call for read integer
 syscall        # Get input number from user
 move  $s5, $v0 # Save the button data.
 
 # Restore preserved data
 lw $t8, 0($sp)   # Restore $t8
 lw $t9, 4($sp)   # Restore $t9
 addi $sp, $sp, 8 # Deallocate stack space
 
 jr $ra # return to caller (main)
 
# -----------------------------------------------------------------------------------------------------------

# In addition to choosing which direction and whether to go, this function also chooses whether the doors should be opened (but not closed)
# Clobbers: $t0-$t4
# Modifies: $s1-$s7 (global state registers), $t8
chooseDirection:
 # service current floor if there is a pending request.
 addi $t0, $s0, -1  # t0 = current floor - 1 (for shift amount)
 li $t1, 1          # t1 = 1
 sllv $t1, $t1, $t0 # t1 = 1 << current floor -1 = bitmask of current floor in s6
 and $t2, $s6, $t1  # t2 = interior request for current floor
 
 # check the external call for the current floor.
 # The external call registers are: s1 (floor 1), s2 (floor 2), ... s5 (floor 5), so we check the current floor and copy that to $t3
 beq $s0, 1, curr1
 beq $s0, 2, curr2
 beq $s0, 3, curr3
 beq $s0, 4, curr4
 beq $s0, 5, curr5
 
 curr1: move $t3, $s1
        j currdone
 curr2: move $t3, $s2
        j currdone
 curr3: move $t3, $s3
        j currdone
 curr4: move $t3, $s4
        j currdone
 curr5: move $t3, $s5
        j currdone
 
 currdone:
 li $t0, 1
 sllv $t0, $t0, $s7 # $t1 = 1 if s7 is 0, 2 if s7 is 1.
 and $t3, $t3, $t0  # mask off up/down for exterior buttons
 #if either interior or exterior buttons are pending, jump to service them.
 bne $t2, $zero, service # check inside buttons
 bne $t3, $zero, service # check outside buttons
 
 # No request at current floor. Check that some pending request exists anywhere.
 li $t0, 31        # 0x1F, mask for interior requests floors 1-5.
 and $t1, $s6, $t0 # All pending interior requests.
 or $t2, $s1, $s2  # combine requests from 1 and 2
 or $t2, $t2, $s3  # add floor 3 requests
 or $t2, $t2, $s4  # add floor 4 requests
 or $t2, $t2, $s5  # add floor 5 requests
 or $t2, $t2, $t1  # if any request exists inside or out, t2 != 0
 beq $t2, $zero, nopending
 
 # Look in the current direction as defined by s7
 bne $s7, $zero, checkup # if s7 != 0, we're going up.
 j checkdown             # else, go down.
 
 # Check upwards
 checkup:
  move $t0, $s0    # start from the current floor
  checkuploop:
  addi $t0, $t0, 1 # and move up.
  ble $t0, 5, checkupinner
  j nopendingup
  
  checkupinner:
   # check interior on floor t0
   move $t1, $t0
   addi $t1, $t1, -1  # bit index
   li $t3, 1
   sllv $t3, $t3, $t1 # t3 = 1 << (t0 - 1) = bit index
   and $t4, $s6, $t3  # check interior button for t0
   bne $t4, $zero, foundup
   
   # check external request for floor t0
   li $t4, 0
   beq $t0, 1, upfloor1
   beq $t0, 2, upfloor2
   beq $t0, 3, upfloor3
   beq $t0, 4, upfloor4
   beq $t0, 5, upfloor5
   
   upfloor1: move $t4, $s1
             j upcheck
   upfloor2: move $t4, $s2
             j upcheck
   upfloor3: move $t4, $s3
             j upcheck
   upfloor4: move $t4, $s4
             j upcheck
   upfloor5: move $t4, $s5
             j upcheck
             
   upcheck:
   andi $t4, $t4, 3        # Ensure that we only check for up requests
   bne $t4, $zero, foundup # if external request exists, we have a pending call
   j checkuploop # check the next floor
   
   foundup:
   jr $ra # return (and continue in the same direction)
   
   nopendingup:
   # No pending request found above this floor.
   li $s7, 0   #change direction to down.
   j checkdown
   
 # Check downwards
 checkdown:
  move $t0, $s0    # start from the current floor
  checkdownloop:
  addi $t0, $t0, -1 # and move down.
  blt $t0, 1, nopendingdown
  
  checkdowninner:
   # check interior on floor t0
   move $t1, $t0
   addi $t1, $t1, -1  # bit index
   li $t3, 1
   sllv $t3, $t3, $t1 # t3 = 1 << (t0 - 1) = bit index
   and $t4, $s6, $t3  # check interior button for t0
   bne $t4, $zero, founddown
   
   # check external request for floor t0
   li $t4, 0
   beq $t0, 1, downfloor1
   beq $t0, 2, downfloor2
   beq $t0, 3, downfloor3
   beq $t0, 4, downfloor4
   beq $t0, 5, downfloor5
   
   downfloor1: move $t4, $s1
             j downcheck
   downfloor2: move $t4, $s2
             j downcheck
   downfloor3: move $t4, $s3
             j downcheck
   downfloor4: move $t4, $s4
             j downcheck
   downfloor5: move $t4, $s5
             j downcheck
             
   downcheck:
   andi $t4, $t4, 3        # Ensure that we only check for down requests
   bne $t4, $zero, founddown # if external request exists, we have a pending call
   j checkdownloop # check the next floor
   
   founddown:
   jr $ra # return (and continue in the same direction)
   
   nopendingdown:
   # No pending request found above this floor.
   li $s7, 1   #change direction to up.
   j checkup
  
 
 service:
  li $t9, 0 # stop the elevator
  li $t8, 1 # open the doors
  # clear interior request for the current floor
  addi $t0, $s0, -1   # Compute bit index (current floor - 1)
  li $t1, 1
  sllv $t1, $t1, $t0  # t1 = 1 << (current floor - 1) = current floor bitmask
  nor $t2, $t1, $zero # t2 = ~t1 (bitwise not of t1)
  and $s6, $s6, $t2   # clear the interior button.
  
  li $t0, 1          # load 1 into t0
  sllv $t0, $t0, $s7 # if elevator is going up, shift it to 2
  not $t0, $t0       # invert t0 so it can be used with and to clear the relevant bit.
  
  # Clear the relevant external button
  beq   $s0, 1, clrfloor1
  beq   $s0, 2, clrfloor2
  beq   $s0, 3, clrfloor3
  beq   $s0, 4, clrfloor4
  beq   $s0, 5, clrfloor5
  
  clrfloor1: and $s1, $s1, $t0
              j service_done
  clrfloor2: and $s2, $s2, $t0
              j service_done
  clrfloor3: and $s3, $s3, $t0
              j service_done
  clrfloor4: and $s4, $s4, $t0
              j service_done
  clrfloor5: and $s5, $s5, $t0
              j service_done
  
  service_done: jr $ra
  
 nopending:
  li $t8, 0 # doors should stay closed
  li $t9, 0 # elevator should stay stopped
  jr $ra    # return to main
 
# -----------------------------------------------------------------------------------------------------------

# Handles the emergency state including printing information for first responders.
doEmergency:
 li $v0, 4      # System call for print string
 la $a0, emerg1 # Load emergency state message
 syscall        # Print emergency message
 li $v0, 1      # System call for print integer
 move $a0, $s0  # load the current floor
 syscall        # print the current floor
 li $v0, 4      # System call for print string
 la $a0, emerg2 # Load emergency state message
 syscall        # Print emergency message
 # Check if the elevator was going up or down and print accordingly
 beq $s7, $zero, emergelse # Check if elevator is going down, then jump to emergelse if so
 emergif:                  # Label not actually used but makes code look nice
 la $a0, up                # Load up string, syscall already specified
 syscall                   # Print emergency message
 j emergendif              # end if
 emergelse:                # else label
 la $a0, dn                # Load down string
 syscall                   # Print emergency message
 emergendif:               # end label
 #Finish the emergency message
 la $a0, nl     #Load the newline string
 syscall        # Print the newline
 la $a0, emerg3 # Load emergency state message
 syscall        # Print emergency message
 # Exit.
 li $v0, 10     # System call for exit
 syscall        # Terminate program

# -----------------------------------------------------------------------------------------------------------

moveDoors:
 # Check if the elevator is in motion; if so, call invalid.
 bne  $t9, $zero, invalid

 # Preserve t9 on the stack. (t8 is in a known state and will always be set so we don't need to preserve it)
 addi $sp, $sp, -4
 sw   $t9, 0($sp)

 # Print "The doors are "
 li   $v0, 4         # syscall for print string
 la   $a0, door      # load address of "The doors are "
 syscall

 # Print "opening"
 la   $a0, op        # load address of "opening"
 syscall

 # Print newline (".\n")
 la   $a0, nl        # load address of newline string
 syscall

    # ------------------------------------------------------------------
    # NOTE: Checking the actual door movement (e.g., waiting for sensor input
    #       or timing delays) is not implemented here due to differences between
    #       elevator types. This controller assumes the door operation happens
    #       instantaneously in the simulation.
    # ------------------------------------------------------------------

 # Set t8 to 0 to indicate that doors are now closed.
 li   $t8, 0

 # Print "The doors are "
 li   $v0, 4
 la   $a0, door      # re-use door string
 syscall

 # Print "closing"
 la   $a0, cl        # load address of "closing"
 syscall

 # Print newline (".\n")
 la   $a0, nl
 syscall

 # Restore t9 (the motion state) from the stack.
 lw $t9, 0($sp)
 addi $sp, $sp, 4 # deallocate stack space

 jr $ra # Return to caller (main)
 

# -----------------------------------------------------------------------------------------------------------

moveElevator:
 # Return immediately if $t9 is 0 (i.e., no elevator movement required)
 addi $sp, $sp, -8 # save things on the stack
 sw $t8, 0($sp)
 sw $t9, 4($sp)
 beq $t9, $zero, elevatordone # if the elevator is not moving, exit.
 
 # Check direction stored in $s7: 1 indicates up, 0 indicates down.
 bne $s7, $zero, elevatorup 
 
 # Else: Elevator is moving down.
 # Print "The elevator is moving "
 li $v0, 4 # string syscall
 la $a0, mov
 syscall

 # Print "down"
 la $a0, dn
 syscall

 # Print newline
 la $a0, nl
 syscall
 
 j elevatordone
 
 elevatorup:
 # Print "The elevator is moving "
 li $v0, 4 # string syscall
 la $a0, mov
 syscall

 # Print "up"
 la $a0, up
 syscall

 # Print newline
 la $a0, nl
 syscall
 
 
 elevatordone:
 lw $t8, 0($sp) # restore things on the stack
 lw $t9, 4($sp)
 addi $sp, $sp, 8
 
 jr $ra # return to main
 

# -----------------------------------------------------------------------------------------------------------

# Main elevator control loop
main: # The only way this can exit is via a failure state - this is by design, elevators never stop working unless something breaks.
 # just incase, initial values. This prevents any garbage data from being loaded, even though it *should* be zeroed beforehand.
 li $s0, 0
 li $s1, 0
 li $s2, 0
 li $s3, 0
 li $s4, 0
 li $s5, 0
 li $s6, 0
 li $s7, 0
 li $t8, 0
 li $t9, 0
 mainloop:
  jal checkFloor      # Update current floor from input
  jal getButtons      # Read button states
  jal chooseDirection # Determine movement direction
  
  # Emergency stop detection
  andi $t0, $s6, 32           # isolate the 6th bit (bit 5 in 0-base)
  bne $t0, $zero, doEmergency # if the sixth bit of $s0 is 1, the emergency button has been pressed.
  
  # Door state decision branch
  beq $t8, $zero, doorsclosed # $t8=0: doors closed
  
  doorsopen:
   jal moveDoors # Handle door operations - the current implementation does not simulate door opening/closing time, this should be handled by sensors in hardware.
   j mainloop    # Continue cycle
  doorsclosed:
   jal moveElevator # Handle elevator movement
   j mainloop       # Continue cycle
